/*
 * Copyright 2013, Rogue.IO
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Gradle tasks for integrating with Google AppEngine
 */
configurations {
    envsetup
}

dependencies {
    envsetup gaeArtifactGroup + ':' + gaeArtifactName + ':' + gaeArtifactVersion
}

/**
 * Download and upack the GAE/J setup
 */
task setup_GAE_SDK << {

    // Download & Verify that the app engine has been specified.
    def gaeDepSet = configurations.envsetup.dependencies
                                  .findAll { dep -> (dep.group == gaeArtifactGroup && dep.name == gaeArtifactName) }

    // Verify that there is only one GAE dependency defined. Warn the user otherwise
    if (gaeDepSet.isEmpty()) {
        ant.fail('ERROR: No GAE/J SDK specified as a dependency to the \'envsetup\' configuration')
    }

    if (gaeDepSet.size() != 1) {
        println 'WARNING: Multiple GAE/J SDKs specified in the \'envsetup\' configuration dependency.'
    }

    // Create the folder if it doesn't exist
    File rootSdkFldr = new File(rootDir, gaeArtifactName)
    if (!rootSdkFldr.exists()) {
        rootSdkFldr.mkdir()
    }

    if (!gaeSdkFldr.exists()) {
        // Unpack the SDK here.
        println 'Unpacking the GAE/J SDK files'
        configurations.envsetup.files { dep -> (dep.group == gaeArtifactGroup && dep.name == gaeArtifactName) }
                      .each { file ->
            if (file.isFile() && file.getName().endsWith('.zip')) {
                task('unzipSDK', type: Copy)
                        .from(zipTree(file))
                        .into(rootSdkFldr)
                        .execute()
            }
        }

        // Verify that the folder was created. This acts a secondary check in the event of the packaging scheme of GAE/J
        // changing.
        if (!gaeSdkFldr.exists()) {
            ant.fail("The GAE/J artifact packaging has changed. Could not find the sdk folder "
                             + gaeSdkFldr.absolutePath + " build script.")
        }
    }
}

/**
 * Ensures that the war file has been exploded. This is required for both running as well as uploading the content.
 */
task explodeWar(dependsOn: "build") << {
    File gaeWarDir = new File(file(buildDir), 'war_exploded');
    if (!gaeWarDir.exists()) {
        gaeWarDir.mkdir()
    }

    File[] warFiles = libsDir.listFiles(new FilenameFilter() {
        @Override
        boolean accept(File dir, String name) {
            return name.endsWith('.war')
        }
    })

    if (warFiles.length != 1) {
        ant.fail('Multiple war files detected')
    }

    // Unzip the war file to the app_war directory
    task('unzipWar', type: Copy)
            .from(zipTree(warFiles[0]))
            .into(gaeWarDir)
            .execute()
}

/**
 * Start the dev app server
 */
task launchDevAppServer(dependsOn: explodeWar) << {
    File gaeWarDir = new File(file(buildDir), 'war_exploded');
    task('launchGAEServer', type: JavaExec) {
        main = 'com.google.appengine.tools.KickStart'
        classpath = files(rootProject.ext.gaeSdkFldrPath + '/lib/appengine-tools-api.jar')
        args = ['com.google.appengine.tools.development.DevAppServerMain', '--port=8888', '--address=0.0.0.0', '--jvm_flag=-Xdebug', '--jvm_flag=-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=9999', gaeWarDir.absolutePath]
    }
    .execute()
}

/**
 * Uploads the application to AppEngine
 */
task uploadApp(dependsOn: explodeWar) << {
    File gaeWarDir = new File(file(buildDir), 'war_exploded');
    def gaeBinDir = rootProject.gaeSdkFldrPath + File.separator + 'bin' + File.separator;
    def command = gaeBinDir + (Os.isFamily(Os.FAMILY_WINDOWS) ? 'appcfg.cmd' : 'appcfg.sh')

    println 'Uploading the application to AppEngine'
    task('updateApp', type: Exec) {
        executable = command
        args = ['update', gaeWarDir.absolutePath]
    }.execute()
}
