/*
 * Copyright 2013, Rogue.IO
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package rogue.app.framework.view.faces.controller;

import com.google.appengine.api.datastore.Blob;
import com.google.appengine.api.datastore.Key;
import com.google.appengine.api.datastore.KeyFactory;
import org.primefaces.event.FileUploadEvent;
import org.primefaces.model.UploadedFile;
import rogue.app.framework.AppRuntimeException;
import rogue.app.framework.annotations.ControllerFor;
import rogue.app.framework.model.AppObject;
import rogue.app.framework.model.BinaryResource;
import rogue.app.framework.model.PersistentObject;
import rogue.app.framework.persistence.JpaQuery;
import rogue.app.framework.persistence.PersistenceUtils;
import rogue.app.framework.util.ScopedStateHolder;
import rogue.app.framework.util.StateHolder;
import rogue.app.framework.view.faces.EntityFacesController;
import rogue.app.framework.view.faces.model.QueryDataModel;

import javax.enterprise.context.SessionScoped;
import javax.faces.model.DataModel;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Generic controller to help with managing binary resources.
 */
@ControllerFor(name = "files", model = BinaryResource.class)
public class BinaryResourcesController extends EntityFacesController<BinaryResource>
{
    /**
     * The prefix that is associated with all temporary IDs that are generated by this controller.
     */
    public static final String TMP_ID_PREFIX = "tmpId_";
    /**
     * The string used as the 'kind' parameter for constructing a Key object. This information is used to identify
     * temporary resources that are stored in the session scope.
     */
    private static final String KEY_KIND = BinaryResource.class.getSimpleName() + "_" + TMP_ID_PREFIX;

    private static final String CLASS_NAME = BinaryResourcesController.class.getName();
    private static final Logger LOGGER = Logger.getLogger(CLASS_NAME);

    private static final String SESSION_KEY = CLASS_NAME + "_sessionMap";

    private String temporaryResourceId;

    public BinaryResourcesController()
    {
        super();
    }

    public BinaryResourcesController(EntityFacesController<? extends PersistentObject> parentController)
    {
        super(parentController);
    }

    @Override
    protected DataModel<BinaryResource> constructDataModel()
    {
        Map<String, Object> queryParams = new HashMap<>(1);
        PersistentObject parent = (PersistentObject) this.getParentController().getSelectedResource();
        queryParams.put("appObjRefKey", parent != null ? parent.getId() : null);
        queryParams.put("nameSpace", PersistenceUtils.getAppObjectNameSpace(parent));
        JpaQuery listingQuery = new JpaQuery("BinaryResourceEntity.findResources", true, queryParams);
        JpaQuery countQuery = new JpaQuery("BinaryResourceEntity.findResources.count", true, queryParams);
        return new QueryDataModel<>(getDelegate(), getConverter(), listingQuery, countQuery);
    }

    @Override
    public BinaryResource getNewInstance()
    {
        BinaryResource resource = super.getNewInstance();
        PersistentObject ref = (PersistentObject) this.getParentController().getSelectedResource();
        if (ref != null)
        {
            resource.setNameSpace(PersistenceUtils.getAppObjectNameSpace(ref));
            resource.setAssociatedResource(ref);
        }

        return resource;
    }

    @Override
    public BinaryResource getNewInstance(AppObject<?, ?> parent) throws AppRuntimeException
    {
        BinaryResource resource = super.getNewInstance(parent);
        PersistentObject ref = (PersistentObject) this.getParentController().getSelectedResource();
        if (ref != null)
        {
            resource.setNameSpace(PersistenceUtils.getAppObjectNameSpace(ref));
            resource.setAssociatedResource(ref);
        }
        return resource;
    }

    @Override
    public BinaryResource findById(Key id) throws AppRuntimeException
    {
        if (KEY_KIND.equals(id.getKind()))
        {
            return getFromSessionMap(TMP_ID_PREFIX + id.getName());
        }
        else
        {
            return super.findById(id);
        }
    }

    @Override
    public Key parseId(String idAsString) throws AppRuntimeException
    {
        Key key;
        if (idAsString != null && idAsString.startsWith(TMP_ID_PREFIX))
        {
            String id = idAsString.substring(TMP_ID_PREFIX.length());
            key = KeyFactory.createKey(KEY_KIND, id);
        }
        else
        {
            key = super.parseId(idAsString);
        }
        return key;
    }

    @Override
    public void setSelectedResource(BinaryResource resource)
    {
        super.setSelectedResource(resource);
        initTemporaryId();
    }

    /**
     * File upload event handler
     *
     * @param event file upload event.
     */
    public void handleFileUpload(FileUploadEvent event)
    {
        final String METHOD_NAME = "handleFileUpload";
        BinaryResource resource = getSelectedResource();
        if (resource.isMutable())
        {
            UploadedFile file = event.getFile();

            resource.setBlob(new Blob(file.getContents()));
            resource.setName(file.getFileName());
            LOGGER.logp(Level.FINE, CLASS_NAME, METHOD_NAME, "Updated binary resource instance with uploaded data.");

            initTemporaryId();
        }
    }

    /**
     * Get the temporary resource ID that has been assigned to the currently selected resource. This is useful when
     * requesting for resources via the ResourceHandler.
     *
     * @return the temporary resource ID that has been assigned to the currently selected resource.
     */
    public String getTemporaryResourceId()
    {
        initTemporaryId();
        return temporaryResourceId;
    }

    private static BinaryResource getFromSessionMap(String id)
    {
        Map<String, BinaryResource> resourceMap = getResourceMap();
        return resourceMap != null ? resourceMap.get(id) : null;
    }

    private static void putIntoSessionMap(String id, BinaryResource resource)
    {
        Map<String, BinaryResource> resourceMap = getResourceMap();
        if (resourceMap != null)
        {
            resourceMap.put(id, resource);
        }
    }

    private void removeFromSessionMap(String id)
    {
        Map<String, BinaryResource> resourceMap = getResourceMap();
        if (resourceMap != null)
        {
            resourceMap.remove(id);
        }
    }

    private static Map<String, BinaryResource> getResourceMap()
    {
        StateHolder holder = ScopedStateHolder.getStateHolder(SessionScoped.class);
        Map<String, BinaryResource> resourceMap = null;
        if (holder != null)
        {
            resourceMap = holder.get(SESSION_KEY);
            if (resourceMap == null)
            {
                resourceMap = new HashMap<>(3);
            }
            holder.put(SESSION_KEY, resourceMap);
        }

        return resourceMap;
    }

    private void initTemporaryId()
    {
        BinaryResource resource = getSelectedResource();
        if (resource != null)
        {
            if (resource.getId() == null || resource.isMutable())
            {
                if (temporaryResourceId != null && !Objects.equals(getFromSessionMap(temporaryResourceId), resource))
                {
                    removeFromSessionMap(temporaryResourceId);
                    temporaryResourceId = null;
                }

                if (temporaryResourceId == null)
                {
                    temporaryResourceId = TMP_ID_PREFIX + System.currentTimeMillis();
                    // Make sure that you put the current resource in to the session scope.
                    putIntoSessionMap(temporaryResourceId, resource);
                }
            }
            else if (temporaryResourceId != null)
            {
                removeFromSessionMap(temporaryResourceId);
                temporaryResourceId = null;
            }
        }
    }
}